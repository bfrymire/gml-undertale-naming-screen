<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// turn off anti-aliasing filtering
display_reset(0, false);
texture_set_interpolation(false);

// current string the player inputs
current_string = '';
string_position_x = 0;
string_position_y = 0;
string_color = c_white;
// The original highlighted color is yellow;
// However, it's very difficult to see
// string_highlight_color = c_yellow;
string_highlight_color = c_aqua;

// max number of characters the player is able to input
max_string = 6;

// number of pixels the string can wobble when being drawn
string_wobble = 1;

name_state = 'Choosing_Name'; // can only be 'Choosing_Name' || 'Confirmation'
name_index = 0;

// Create a list of names that already exist
header_text = 'Name the fallen human.';
is_taken_name = false;
taken_name_index = noone;
taken_name = noone; // this is necessary, variable needs to be defined
// taken_name = scr_2d_array_add(taken_name, name, message, is_unique?);
taken_name = scr_2d_array_add(taken_name, "fryman", "Hey! Thats my name!", true);
taken_name = scr_2d_array_add(taken_name, "AAAAAA", "Not very creative...?", false);
taken_name = scr_2d_array_add(taken_name, "TehZachinator", "That name is technically unpossible...", false);

// adding A-Z
var w, max_w, h;
w = 0;
max_w = 6;
h = 0;
for(var i = 65; i &lt;= 90; i++) {
    ascii_characters[h, w] = chr(i);
    w++;
    if w &gt; max_w {
        h++;
        w = 0;
    }
}
// adding a-z
w = 0;
h = array_height_2d(ascii_characters);
for(var i = 97; i &lt;= 122; i++) {
    ascii_characters[h, w] = chr(i);
    w++;
    if w &gt; max_w {
        h++;
        w = 0;
    }
}
// adding 'Quit', 'Backspace', 'Done'
h = array_height_2d(ascii_characters);
ascii_characters[h, 0] = 'Quit';
ascii_characters[h, 1] = 'Backspace';
ascii_characters[h, 2] = 'Done';

// Confirmation page text
confirmation_text[0] = "No";
confirmation_text[1] = "Yes";
confirmation_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// testing
if keyboard_check(vk_control) {
    if keyboard_check_pressed(ord('W')) {
        game_end();
    }
    if keyboard_check_pressed(ord('R')) {
        game_restart();
    }
}

// picking your character's name page
if name_state = 'Choosing_Name' {
    name_index = 0; // reset name_index to 0
    if keyboard_check_pressed(vk_left) {
        if string_position_x != 0 {
            string_position_x -=1;
        }
    }
    if keyboard_check_pressed(vk_right) {
        if string_position_x != array_length_2d(ascii_characters, string_position_y) - 1 {
            string_position_x += 1;
        }
    }
    if keyboard_check_pressed(vk_up) {
        if string_position_y != 0 {
            string_position_y -= 1;
            if string_position_x &gt; array_length_2d(ascii_characters, string_position_y) - 1 {
                string_position_x = array_length_2d(ascii_characters, string_position_y) - 1;
            }
        }
    }
    if keyboard_check_pressed(vk_down) {
        if string_position_y != array_height_2d(ascii_characters) - 1 {
            string_position_y += 1;
            if string_position_y {
                /////////// THIS NEEDS TO BE FINISHED ^^^^^^^^
            }
            if string_position_x &gt; array_length_2d(ascii_characters, string_position_y) - 1 {
                string_position_x = array_length_2d(ascii_characters, string_position_y) - 1;
            }
        }
    }
    
    if keyboard_check_pressed(vk_backspace) {
        current_string = scr_string_backspace(current_string);
    }
    
    if keyboard_check_pressed(vk_space) {
        if string_position_y != array_height_2d(ascii_characters) - 1 {
            if string_length(current_string) &lt; max_string {
                current_string += ascii_characters[string_position_y, string_position_x];
                // if your name is the max length, move to "Done"
                if string_length(current_string) == max_string {
                    string_position_x = 2;
                    string_position_y = array_height_2d(ascii_characters) - 1;
                }
            }
        } else {
            if string_position_x == 0 {
                // remove show_message();
                show_message('You selected "Quit"');
                // quit code goes here
            } else if string_position_x == 1 {
                current_string = scr_string_backspace(current_string);
            } else {
                if string_length(current_string) &gt; 0 {
                    name_state = 'Pre_Confirmation';
                }
            }
        }
    }
    
    // manual keyboard strokes
    if keyboard_lastkey != "" {
        if keyboard_lastkey == clamp(keyboard_lastkey,65,90) || keyboard_lastkey == clamp(keyboard_lastkey,97,122) {
            if string_length(current_string) &lt; max_string {
                current_string += keyboard_lastchar;
                // if your name is the max length, move to "Done"
                if string_length(current_string) == max_string {
                    string_position_x = 2;
                    string_position_y = array_height_2d(ascii_characters) - 1;
                }
            }
        }
        keyboard_lastkey = "";
    }
} else{
    if name_state == 'Pre_Confirmation' {
        // pre confirmation page
        is_name_taken = false;
        for(var i = 0; i &lt; array_height_2d(taken_name) ; i++) {
            if string_lower(taken_name[i, 0]) == string_lower(current_string) {
                header_text = taken_name[i, 1];
                is_name_taken = taken_name[i, 2];
                name_taken_index = i;
                break;
            }
        }
        name_state = 'Confirmation';
    }
    if name_state == 'Confirmation' {
        // name confirmation page
        if name_index &lt; 1 {
            name_index += 0.25 / room_speed; // 0 to 1 in 4 seconds;
            if name_index &gt; 1 {
                name_index = 1;
            }
        }
        if is_name_taken == false {
              if keyboard_check_pressed(vk_left) {
                confirmation_index -= 1;
              }
              if keyboard_check_pressed(vk_right) {
                confirmation_index += 1;
              }
              if confirmation_index != clamp(confirmation_index, 0, array_length_1d(confirmation_text)-1) {
                confirmation_index = clamp(confirmation_index, 0, array_length_1d(confirmation_text)-1);
              }
        }
        if keyboard_check_pressed(vk_enter) {
            if is_name_taken == true {
                confirmation_index = 0;
            }
            if confirmation_index == 0 {
                // "No"
                confirmation_index = 1;
                name_state = 'Choosing_Name';
                header_text = 'Name the fallen human.';
            } else if confirmation_index == 1 {
                // "Yes"
                show_message('Pass the (current_string) on');
                // Remove next line after testing
                name_state = 'Choosing_Name';
                // Remove next line after testing
                header_text = 'Name the fallen human.';
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set font
draw_set_font(fnt_dtm_sans);

// set variables
var draw_y, character_width, character_height, ii, i, ascii_x, last_y, last_line_width;
draw_y = 0;
character_width = string_width('W');
character_height = string_height('W');
spacing_width = 48;
spacing_height = 0;
ascii_x = floor((room_width/2) - ((spacing_width * max_string + character_width * 7) / 2)) + 1

// draw title
draw_set_color(string_color);
draw_y += 32;
draw_text_ext(floor(room_width/2 - spacing_width*3)+1,draw_y,string(header_text),-1,spacing_width*6);


// draw typed name
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_y += character_height + 10;
// draw_text(floor((room_width/2)-(character_width*6)/2),draw_y,string(current_string));
draw_text_transformed(floor(room_width/2)+1,draw_y+(character_height/2),current_string,1+(4*name_index),1+(4*name_index),0);
// resetting the aligns
draw_set_halign(fa_left);
draw_set_valign(fa_top);

if name_state == 'Choosing_Name' {
    // 'Choosing_Name' screen
    // drawing ascii_characters
    draw_y += character_height + 10;
    for(ii = array_height_2d(ascii_characters) - 2; ii &gt; -1; ii--) {
        for(i = array_length_2d(ascii_characters, ii) - 1; i &gt; -1 ; i--) {
            // change color if currently selected index
            if ii == string_position_y &amp;&amp; i == string_position_x {
                draw_set_color(string_highlight_color);
            } else draw_set_color(string_color);
            draw_text(ascii_x + ((character_width + spacing_width) * i) - string_wobble + floor(random(string_wobble * 2)),draw_y + ((character_height + spacing_height) * ii) - string_wobble + floor(random(string_wobble * 2)),ascii_characters[ii, i]);
        }
    }
    // draw last line of ascii_characters
    ii = array_height_2d(ascii_characters) - 1;
    last_y = draw_y + ((character_height + spacing_height) * ii) + 8;
    last_line_width = 0;
    for(i = 0; i &lt; array_length_2d(ascii_characters, ii); i++) {
        // change color if currently selected index
        if ii == string_position_y &amp;&amp; i == string_position_x {
            draw_set_color(string_highlight_color);
        } else draw_set_color(string_color);
        draw_text(ascii_x + last_line_width + (spacing_width * i),last_y,ascii_characters[ii, i]);
        last_line_width += string_width(ascii_characters[ii, i]);
    }
} else if name_state == 'Confirmation' {
    // 'Confirmation' Screen
    if is_name_taken = false {
         for(var i = 0; i &lt; array_length_1d(confirmation_text); i++) {
              if i == confirmation_index {
                draw_set_color(string_highlight_color);
              }
              // edit this later to place correctly on screen
              draw_text(10 + i * 64,64,string(confirmation_text[i]));
              // reset draw color back to 'string_color'
              draw_set_color(string_color);
         }
    } else {
         draw_set_color(string_highlight_color);
         draw_text(10,64,"Go back"); // edit this later to place correctly on screen
         draw_set_color(string_color);
    }      
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
